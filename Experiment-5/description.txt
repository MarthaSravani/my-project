Dynamic Product Filter with Dropdown – Code Breakdown & Validations
1. FEATURE: Dropdown (Filter by Category)
Requirement:

Must allow user to choose a category (Clothing, Electronics, Books) or "All".

On selection, only matching products should be displayed.

"All" should display all products.

✅ Valid Input/Actions:

Selecting "Clothing" → Only "T-Shirt", "Jeans" visible.

Selecting "Electronics" → Only "Headphones", "Smartphone" visible.

Selecting "Books" → Only "Novel", "Cookbook" visible.

Selecting "All" → All 6 products visible.

❌ Invalid Input/Actions:

User tries to select a non-existent category → Not possible (restricted by dropdown).

Empty selection → Not possible (default is "All").

2. FEATURE: Product List Rendering
Requirement:

Products must be displayed dynamically using JavaScript.

Each product should appear as a list item (<li>).

If no product matches the filter, show "No products available".

✅ Valid Cases:

User selects "Books" → "Novel", "Cookbook" shown.

User selects "Clothing" → "T-Shirt", "Jeans" shown.

❌ Invalid Cases:

Empty list displayed → Should instead show "No products available".

Stale data persists → Must always refresh based on current filter.

3. CSS Styling Breakdown
1. ELEMENT: body (Page Background)

Purpose: Set page background and spacing.

Properties:

background: #f4f6f8; → Light grayish background.

margin: 40px; → Adds page spacing.

2. ELEMENT: .container (Main Product Box)

Purpose: Wraps dropdown and product list neatly.

Properties:

max-width: 500px; → Limits container width for readability.

margin: auto; → Centers content horizontally.

background: #fff; → White clean background.

border-radius: 12px; → Soft rounded corners.

box-shadow: 0 4px 12px rgba(0,0,0,0.1); → Subtle shadow effect.

3. ELEMENT: select (Dropdown Menu)

Purpose: Allows user to select product category.

Properties:

width: 100%; → Full width.

padding: 8px; → Comfortable clicking area.

border-radius: 6px; → Rounded edges.

4. ELEMENT: ul & li (Product List Items)

Purpose: Display products in a structured list.

Properties (li):

background: #f9fafc; → Light card-like effect.

padding: 10px; → Adds readability.

margin-bottom: 8px; → Separates items.

border-radius: 6px; → Rounded item edges.

li:hover { background: #eef3f9; } → Highlight effect on hover.

5. ELEMENT: .no-items (Empty State Message)

Purpose: Display message when no products match.

Properties:

text-align: center; → Centered message.

color: #999; → Muted gray color.

font-style: italic; → Differentiates from normal text.

4. FORM SUBMISSION Equivalent (Event Handling)
Instead of a form, this project uses JavaScript events.

When user changes the dropdown, the list updates instantly via renderProducts().

No page reload is required.

LEARNING OUTCOMES
How to build a dynamic product list using JavaScript DOM manipulation.

How to handle events (change on dropdown) and update UI in real-time.

How to apply CSS for modern UI design (hover effects, shadows, rounded corners).

How to display graceful fallback messages ("No products available").